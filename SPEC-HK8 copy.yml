##########################################################
##   _______   _                _    _   _  __   ___    ##
##  |__   __| | |              | |  | | | |/ /  / _ \   ##
##     | |    | |__     ___    | |__| | | ' /  | (_) |  ##
##     | |    | '_ \   / _ \   |  __  | |  <    > _ <   ##
##     | |    | | | | |  __/   | |  | | | . \  | (_) |  ##
##     |_|    |_| |_|  \___|   |_|  |_| |_|\_\  \___/   ##
##########################################################



# no I/O as of right now
# ram and rom are same just with differnt chips and instructions

RAM: "11-bits" # 2048 Bytes

# rom is 16-bit data due to ir size
ROM: "11-bits * 2" # 4096 Bytes

IR: "16-Bit" # Current Instruction being Executed
-  0-04: "Instruction" # 5-bit, total 32 instructions
- 5-15: "Argument 1" # 11-bit
 
Registers:
	- Special:
		- IR:	  "24-Bit" # Current Instruction being Executed
		- Output: "8-Bit" # Display it's content on 7-segment displays
		- SUM: 	  "8-Bit" # Output Of ADD/SUB
		- MAR:	  "16-Bit" # Current Memory Address

	- Gneral Purpose:
		- A: "8-Bit"   - # General Purpose and operand 1 of alu
		- B: "8-Bit"   - # General Purpose and operand 2 of alu

	- FLAGS: "2-Bit"  # CPU Flags
		- 0: "Zero Flag"  # It is set if the output of last alu operation was Zero(0)
		- 1: "Carry Flag" # It is set if the output of last alu operation overflowed and used a carry


Components List:
	- 8-Bit BUS
	- 11-Bit BUS
	- Clock
	- Output
	- Output Reg.
	- ALU
	- SUM Reg.
	- Flags/Flags Reg.
	- MAR
	- Memory
	- A Reg.
	- B Reg.
	- IR
	- Counter
	- Storage
	- Control Signals
	- Control Unit


Micro Instructions: "21 (MAX 24)":
	- Basics:
		- HALT: "Halt The Clock"
		- REST: "Reset Everything Other Than RAM and Storage"
		- FLAG: "Checks for current state and sets flags accordingly"

	- Storage:
		- SARI: "Storage Address Register In"
		- STIR: "Storage To Instruction Register"
	
	- Program Counter:
		- CINC: "Counter Increment"
		- COUT: "Counter Out On Storage Address"
		- JUMP: "Change Counter"

	- RAM/Memory:
		- MARI: "Input Address From BUS Into Memory Address"
		- MEMI: "RAM In"
		- MEMO: "RAM Out"

	- Special Registers:
		- IROF: "Load first 3 bits of IR 19-bit args on BUS"
		- IROS: "Load first 8 bits of last 16-bits of IR 19-bit args on BUS"
		- IROT: "Load last 8 bits of IR 19-bit args on BUS"
		- IROA: "Loads First 11 bits of IR 19-bit args onto Program Counter"
		- OUTI: "Output Register In"

	- General Purpose Registers:
		- ARIN: "A reg in"
		- AOUT: "A reg out"
		- BRIN: "B reg in"
		- BOUT: "B reg out"

	- ALU:
		- SUMO: "Sum Out"
		- ADDS: "Add Reg A and Reg B And Save To SUM register"
		- SUBS: "Substract Reg B from Reg A And Save To SUM register"


Instructions (17, upto 32):

	-  0: {"NOP"} # Do Nothing
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	-  1: {"ADD"} # Add reg A and B And Store Result In SUM Reg
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "MEMO|ARIN"
		- 4: "IROT|MARI"
		- 5: "MEMO|BRIN|ADDS|FLAG"
		- 6: ""
		- 7: "0"
	-  2: {"SUB"} # Subtract MEM Add. B from A And Store Result In SUM Reg
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "MEMO|ARIN"
		- 4: "IROT|MARI"
		- 5: "MEMO|BRIN|SUBS|FLAG"
		- 6: "0"
		- 7: "0"
	-  3: {"LDA", "MEM Add. (11)"} # Load Value Of MEM Add. Into Reg. A
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "MEMO|ARIN"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	-  4: {"STA", "MEM Add. (11)"} # Store Value Of Reg. A Into MEM Add.
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "AOUT|MEMI"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	-  5: {"LDB", "MEM Add. (11)"} # Load Value Of MEM Add. Into Reg. B
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "MEMO|BRIN"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	-  6: {"STB", "MEM Add. (11)"} # Store Value Of Reg. A Into MEM Add.
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "BOUT|MEMI"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	-  7: {"STS", "MEM Add. (11)"} # Store SUM reg to MEM Add.
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "SUMO|MEMI"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	-  8: {"LIA", "VAL (8)"} # Load Imidieate value VAL Into MEM Add.
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "IROT|MEMI"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
  -  9: {"LIB", "VAL (8)"} # Load Imidieate value VAL Into MEM Add.
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "IROT|MEMI"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 10: {"MEM", "MEM Add. (11)"} # Set Memory Address Reg to MEM Add.
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 11: {"JMP", "Storage Add. (11)"} # Jump storage to a specific address
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROA|SARI|STIR" # ONLY IF CARRY IS SET (condition fulfilled by hardware)
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 12: {"JPZ", "Storage Add. (11)"} # Jump storage to a specific address ONLY IF zero flag is set
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROA|SARI|STIR" # ONLY IF CARRY IS SET (condition fulfilled by hardware)
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 13: {"JPC", "Storage Add. (11)"} # Jump storage to a specific address ONLY IF Carry flag is set
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROA|SARI|STIR" # ONLY IF CARRY IS SET (condition fulfilled by hardware)
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 14: {"OUT", "MEM Add. (11)"} # Output Value Of a memory address
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|MARI"
		- 3: "MEMO|OUTI"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 15: {"OTI", "VAL (8)"} # Output a imidieate value
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "IROS|OUTI"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 16: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 17: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 18: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 19: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 20: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 21: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 22: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 23: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 24: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 25: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 26: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 27: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 28: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 29: {"PLH"} # A Placeholder Instruction
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "0"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 30: {"RST"} # Reset The CPU Other than ram and storage and clear everything
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "REST"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
	- 31: {"HLT"} # Halt The Clock
		- 0: "COUT|SARI"
		- 1: "CINC|STIR"
		- 2: "HALT"
		- 3: "0"
		- 4: "0"
		- 5: "0"
		- 6: "0"
		- 7: "0"
